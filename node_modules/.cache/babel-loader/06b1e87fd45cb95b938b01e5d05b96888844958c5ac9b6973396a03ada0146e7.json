{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oburn\\\\projects\\\\job-search-fe\\\\src\\\\pages\\\\JobDetail.js\";\nimport { json, redirect } from 'react-router-dom';\nimport JobItem from '../components/JobItem';\nimport JobsList from '../components/JobsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction JobDetailPage() {\n  const jobs = loadJobs();\n  //const job = loadJob();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(JobsList, {\n      jobs: jobs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = JobDetailPage;\nexport default JobDetailPage;\nasync function loadJob(id) {\n  const response = await fetch('http://localhost:8080/job/get');\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected job.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.job;\n  }\n}\nasync function loadJobs() {\n  const response = await fetch('http://localhost:8080/job/list');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch jobs.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch jobs.' }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: 'Could not fetch jobs.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.jobs;\n  }\n}\nexport async function action(_ref) {\n  let {\n    params,\n    request\n  } = _ref;\n  const jobId = params.jobId;\n  const response = await fetch('http://localhost:8080/job/get', {\n    method: request.method,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(jobId)\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not delete job.'\n    }, {\n      status: 500\n    });\n  }\n  //return redirect('/jobs');\n}\nvar _c;\n$RefreshReg$(_c, \"JobDetailPage\");","map":{"version":3,"names":["json","redirect","JobItem","JobsList","JobDetailPage","jobs","loadJobs","loadJob","id","response","fetch","ok","message","status","resData","job","action","params","request","jobId","method","headers","body","JSON","stringify"],"sources":["C:/Users/oburn/projects/job-search-fe/src/pages/JobDetail.js"],"sourcesContent":["import {\n  json,\n  redirect,\n} from 'react-router-dom';\n\nimport JobItem from '../components/JobItem';\nimport JobsList from '../components/JobsList';\n\nfunction JobDetailPage() {\n  const jobs = loadJobs();\n  //const job = loadJob();\n\n  return (\n    <>\n      {/*<JobItem job={job} />*/}\n      <JobsList jobs={jobs} />\n    </>\n  );\n}\n\nexport default JobDetailPage;\n\nasync function loadJob(id) {\n  const response = await fetch('http://localhost:8080/job/get');\n\n  if (!response.ok) {\n    throw json(\n      { message: 'Could not fetch details for selected job.' },\n      {\n        status: 500,\n      }\n    );\n  } else {\n    const resData = await response.json();\n    return resData.job;\n  }\n}\n\nasync function loadJobs() {\n  const response = await fetch('http://localhost:8080/job/list');\n\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch jobs.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch jobs.' }), {\n    //   status: 500,\n    // });\n    throw json(\n      { message: 'Could not fetch jobs.' },\n      {\n        status: 500,\n      }\n    );\n  } else {\n    const resData = await response.json();\n    return resData.jobs;\n  }\n}\n\nexport async function action({ params, request }) {\n  const jobId = params.jobId;\n  const response = await fetch('http://localhost:8080/job/get',{\n    method: request.method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(jobId)\n  });\n\n  if (!response.ok) {\n    throw json(\n      { message: 'Could not delete job.' },\n      {\n        status: 500,\n      }\n    );\n  }\n  //return redirect('/jobs');\n}\n"],"mappings":";AAAA,SACEA,IAAI,EACJC,QAAQ,QACH,kBAAkB;AAEzB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,QAAQ,MAAM,wBAAwB;AAAC;AAAA;AAE9C,SAASC,aAAa,GAAG;EACvB,MAAMC,IAAI,GAAGC,QAAQ,EAAE;EACvB;;EAEA,oBACE;IAAA,uBAEE,QAAC,QAAQ;MAAC,IAAI,EAAED;IAAK;MAAA;MAAA;MAAA;IAAA;EAAG,iBACvB;AAEP;AAAC,KAVQD,aAAa;AAYtB,eAAeA,aAAa;AAE5B,eAAeG,OAAO,CAACC,EAAE,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;EAE7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMX,IAAI,CACR;MAAEY,OAAO,EAAE;IAA4C,CAAC,EACxD;MACEC,MAAM,EAAE;IACV,CAAC,CACF;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACT,IAAI,EAAE;IACrC,OAAOc,OAAO,CAACC,GAAG;EACpB;AACF;AAEA,eAAeT,QAAQ,GAAG;EACxB,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;EAE9D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMX,IAAI,CACR;MAAEY,OAAO,EAAE;IAAwB,CAAC,EACpC;MACEC,MAAM,EAAE;IACV,CAAC,CACF;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACT,IAAI,EAAE;IACrC,OAAOc,OAAO,CAACT,IAAI;EACrB;AACF;AAEA,OAAO,eAAeW,MAAM,OAAsB;EAAA,IAArB;IAAEC,MAAM;IAAEC;EAAQ,CAAC;EAC9C,MAAMC,KAAK,GAAGF,MAAM,CAACE,KAAK;EAC1B,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAC;IAC3DU,MAAM,EAAEF,OAAO,CAACE,MAAM;IACtBC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,KAAK;EAC5B,CAAC,CAAC;EAEF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMX,IAAI,CACR;MAAEY,OAAO,EAAE;IAAwB,CAAC,EACpC;MACEC,MAAM,EAAE;IACV,CAAC,CACF;EACH;EACA;AACF;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}